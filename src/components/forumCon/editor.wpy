<template lang="wxml">
  <view class="editorC">
    <view class="cu-form-group spanTitle solid-bottom">
      <view class="title">标题</view>
      <input placeholder="输入标题" name="title" value="{{title}}" bindinput="getTitle"></input>
    </view>
    <view
      class="editor-wrapper"
      style="min-height: {{windowHeight}}px"
      scroll-y
      enable-back-to-top>
      <block wx:for="{{nodeList}}" wx:for-item="node" wx:for-index="index" wx:key="{{index}}">
        <view class="editor-node-wrapper">
          <!-- 多行文本框 -->
          <block wx:if="{{node.name === 'p'}}">
            <textarea
            class="editor-textarea"
            value="{{node.children[0].text}}"
            auto-height
            maxlength="-1"
            data-index="{{index}}"
            bindinput="onTextareaInput">
            </textarea>
          </block>
          <!-- 图片区块 -->
          <block wx:if="{{node.name === 'img'}}">
            <!-- <image class="editor-image" src="{{node.attrs.src}}" style="height: {{node.attrs._height * 700}}rpx"></image> -->
            <view class="cu-form-group">
              <view class="grid grid-square flex-sub">
                <view class="bg-img editor-image">
                  <image src='{{node.attrs.src}}' mode='aspectFit'></image>
                </view>
              </view>
            </view>
          </block>
          <!-- 删除标志 -->
            <view class="editor-delete iconfont icon-close "  data-index="{{index}}" bindtap="deleteNode"></view>
          </view>
      </block>
    </view>
    <view class="cu-bar tabbar bg-white foot flex flex-warp justify-around align-center">
      <view class="editor-add-wrapper basis-xs" >
        <!-- 两个点击按钮的图标 -->
        <view class="editor-add iconfont icon-align-left" data-index="-1" bindtap="addText"></view>
        <view class="editor-add iconfont icon-image" data-index="-1" bindtap="addImage"></view>
      </view>
      <view class='com-selectBox basis-lg'>
          <view class='com-sContent' bindtap='selectToggle'>
              <view class='com-sTxt'>{{nowText}}</view>
              <!-- <view class="cuIcon-fold  com-sImg " animation="{{animationData}}"></view> -->
               <image src='../../img/iconfont/dir.png'  class='com-sImg'  animation="{{animationData}}"></image>
          </view>
          <view class='com-sList' wx:if="{{selectShow}}">
              <view wx:for="{{selectArray}}" data-index="{{index}}" wx:key='' class='com-sItem' bindtap='setText'>{{item.text}}</view>
          </view>
      </view>
      <!-- 点击发送 -->
      <view class="basis-xs"  bindtap="onFinish" >
          <button class="cu-btn round bg-blue button-hover">发布</button>
      </view>  
    </view>
  </view>
  
</template>

<script>
import wepy from 'wepy';
export default class editor extends wepy.component {
    components = {
    };

    props=['pselectArray']

    data = {
        nodeList: [],//节点列表
        textBufferPool: [],//文本缓冲区
        toggleDelay: false,
        platformIndex: 0,
        selectShow: false,//初始option不显示
        nowText: "分类",//初始内容
        categoryid:0,
        animationData: {},//右边箭头的动画
        currentNodeIndex:-1,//当前节点下标···
        title:"",
        loadingFlag:true,
        selectArray: [{
            "id": 0,
            "text": "综合"
         }, {
            "id": 1,
            "text": "前端"
         }, {
                "id": 2,
                "text": "架构"
         }, {
                "id": 3,
                "text": "数据库"
         }, {
                "id":4,
                "text": "移动开发"
        }, {
                "id": 5,
                "text": "编程语言"
        },{
                "id": 6,
                "text": "运维"
        },{
                "id": 7,
                "text": "人工智能"
        }]
    };
    methods = {
        getTitle:(e)=>{
            // console.log("获取标题")
            this.title=e.detail.value;
            // console.log(this.title);
        },
    //option的显示与否
        selectToggle: function () {
            var nowShow = this.data.selectShow;//获取当前option显示的状态
            //创建动画
            var animation = wepy.createAnimation({
                timingFunction: "ease",
                transformOrigin:'left top 0rpx',
            })
            this.animation = animation;
            if (nowShow) {
                animation.rotate(0).step();
                 
                this.animationData= animation.export() 
            } else {
                animation.rotate(180).step();
                this. animationData= animation.export()
            }
            this.selectShow= !nowShow
        },
        setText: function (e) {
            // console.log("获取选择")
            // console.log(this.selectArray[e.currentTarget.dataset.index])
            var nowData = this.selectArray[e.currentTarget.dataset.index];//当前option的数据是引入组件的页面传过来的，所以这里获取数据只有通过this.properties
            console.log(nowData)
            var nowIdx = e.target.dataset.index;//当前点击的索引
            console.log(nowIdx)
            var nowText = nowData.text;//当前点击的内容
            // console.log(nowText)
            //再次执行动画，注意这里一定，一定，一定是this.animation来使用动画
            this.animation.rotate(0).step();
            this.selectShow= false,
            this.nowText= nowText,
            this.categoryid=nowIdx,
            this.animationData= this.animation.export()
            var nowDate = {
                id: nowIdx,
                text: nowText
        }
        //   this.triggerEvent('myget', nowDate)
        },
            // 事件：添加文本
        addText(e){
            // console.log("添加文本")
            // console.log(this)
            // console.log(e)
            this.writeTextToNode();//调用方法，添加节点，数组进栈
            const index = e.currentTarget.dataset.index;
            // console.log("数组下标")
            // console.log(index);
            // 声明对象，文本标签
            const node = {
                name: 'p',
                attrs: {
                class: 'xing-p',
                },
                children: [{
                type: 'text',
                text: ''
                }]
            }
            // 节点列表
            const nodeList = this.nodeList;
            // 文本缓冲区
            const textBufferPool = this.textBufferPool;
            // 节点列表数组尾巴中添加新元素，node为一个对象，包含标签名，内容
            this.nodeList.push(node);
            this.textBufferPool.push('');
            // textBufferPool.splice(index + 1, 0, '');
            this.currentNodeIndex=(Number(index)+1);
            // console.log("当前下标")
            // console.log(this.currentNodeIndex)
            // this.textBufferPool = textBufferPool;
        },
        // 事件：添加图片
        addImage(e){
            this.writeTextToNode();
            // 获取当前数组下标
            // console.log("获取当前数组下标")
            // console.log(e.currentTarget.dataset.index)
            const index = e.currentTarget.dataset.index;
            //实现图片选择上传的api,从本地相册选择图片或使用相机拍照。
            wx.chooseImage({
                success: res => {
                    const tempFilePath = res.tempFilePaths[0];
                    // console.log("图片上传,图片的本地临时文件路径列表")
                    // console.log(tempFilePath)
                    wx.getImageInfo({
                        // 获取图片信息。网络图片需先配置download域名才能生效
                        src: tempFilePath,
                        // 图片的路径，可以是相对路径、临时文件路径、存储文件路径、网络图片路径
                        success: res => {
                            // 成功调用接口 
                            const node = {
                                name: 'img',
                                attrs: {
                                    class: 'xing-img',
                                    style: 'width: 100%',
                                    src: tempFilePath,
                                    _height: res.height / res.width,
                                },
                                // 节点信息
                            }
                            let nodeList = this.nodeList;
                            // console.log("图片")
                            // console.log(nodeList+"数组，包含所有节点信息")
                            let textBufferPool = this.textBufferPool;
                            // console.log(textBufferPool)
                            
                            // nodeList.splice(index + 1, 0, node);
                            this.nodeList.push(node);
                            // 将节点信息存入nodelist数组
                            this.textBufferPool.push(tempFilePath);
                            // textBufferPool.splice(index + 1, 0, tempFilePath);
                            // 将相对图片路径存入文本缓冲区
                            // 修改this里的值
                            // this.nodeList = nodeList;
                            // this.textBufferPool = textBufferPool;
                            this.currentNodeIndex=(Number(index)+1);
                            // console.log("当前下标")
                            // console.log(this.currentNodeIndex)
                            this.$apply()
                        }
                    })
                },
            })
        },
        // 事件：删除节点
        deleteNode(e){
            this.writeTextToNode();
            const index = e.currentTarget.dataset.index;
            // console.log("删除节点")
            // console.log(index)
            let nodeList = this.nodeList;
            let textBufferPool = this.textBufferPool;
            nodeList.splice(index, 1);
            textBufferPool.splice(index, 1);
            this.currentNodeIndex=(textBufferPool.length-1);
            // console.log("当前下标")
            // console.log(this.currentNodeIndex)
            this.nodeList = nodeList;
            this.textBufferPool = textBufferPool;
        },
        // 事件：文本输入
        onTextareaInput(e){
            // console.log("文本输入")
            // console.log(e)
            const index = e.currentTarget.dataset.index;
            // console.log(index)
            let textBufferPool = this.textBufferPool;
            textBufferPool[index] = e.detail.value;
            this.textBufferPool = textBufferPool;
        },

        
        onFinish(e){
            var that=this
            let userId=that.$parent.$parent.globalData.userInfo.session_id
            console.log("发送")
            console.log(e)
            console.log(this)
            wx.showLoading({
                    title: '正在发送',
                })
            let postData={
                openid:that.$parent.$parent.globalData.userInfo.openid,
                posttitle:this.title,
                postcontent:this.textBufferPool,
                categoryid:this.categoryid
            }
            console.log("传输信息")
            console.log(postData)
            wx.request({
              url: 'http://10.75.18.51:8080/post/addPost', //开发者服务器接口地址",
              data: postData, //请求的参数",
              method: 'POST',
              dataType: 'json', //如果设为json，会尝试对返回的数据做一次 JSON.parse
              header:{
              // 设置请求头
              "token":userId,
              "content-type":"application/x-www-form-urlencoded"
             },
              success: res => {
                  console.log(res);
                  wx.hideLoading();
                  wepy.redirectTo({ url: '/pages/forum/forum' });               
              },
              fail: () => {

              },
              complete: () => {}
            });
            
            this.writeTextToNode();
            this.handleOutput();
            
        } 
        // 加载

      
    };
// 接收父组件传递过来的的数据
    props = {
        outputType: {
            type: String,
            default: 'html'
        },
        // 是否在选择图片后立即上传
        uploadImageWhenChoose:{
            type: Boolean,
            default: false,
        },
        imageUploadUrl:String,
        imageUploadName:String,
        imageUploadKeyChain:String,
        html: String,
        windowHeight:Number
    }
     onLoad(){
       
        // 初始化，渲染页面
        const nodeList = this.nodeList;
        const textBufferPool = [];
        nodeList.forEach((node, index) => {
            if (node.name === 'p') {
            textBufferPool[index] = node.children[0].text;
            }
        })
        this.textBufferPool = textBufferPool
        this.nodeList = nodeList
        this.currentNodeIndex=-1;
        // console.log("当前下标")
        // console.log(this.currentNodeIndex)
    }
    // 方法：HTML转义
    htmlEncode(str){
        var s = "";
        if (str.length == 0) return "";
        s = str.replace(/&/g, "&gt;");
        s = s.replace(/</g, "&lt;");
        s = s.replace(/>/g, "&gt;");
        s = s.replace(/ /g, "&nbsp;");
        s = s.replace(/\'/g, "&#39;");
        s = s.replace(/\"/g, "&quot;");
        s = s.replace(/\n/g, "<br>");
        return s;
    }
    // 方法：上传图片
    uploadImage(node){
        return new Promise(resolve => {
            let options = {
                filePath: node.attrs.src,
                url: this.imageUploadUrl,
                name: this.imageUploadName,
            }
            options.success = res => {
                const keyChain = this.imageUploadKeyChain.split('.');
                let url = JSON.parse(res.data);
                keyChain.forEach(key => {
                    url = url[key];
                })
                node.attrs.src = url;
                node.attrs._uploaded = true;
                resolve();
            }
            wx.uploadFile(options);
      })
    }
    // 方法：将缓冲池的文本写入节点
    writeTextToNode(e){
        // console.log("缓冲池")
        // console.log(e)
        const textBufferPool = this.textBufferPool;
        const nodeList = this.nodeList;
        // forEach遍历数组
        nodeList.forEach((node, index) => {
            if (node.name === 'p') {
                // 给文本标签进栈
                node.children[0].text = textBufferPool[index];
            }
        })
        this.nodeList = nodeList
    }
    // 方法：处理节点，递归
    handleOutput(index = 0){
        let nodeList = this.nodeList;
        if (index >= nodeList.length) {
            wx.hideLoading();
            if (this.outputType.toLowerCase() === 'html') {
                this.$emit('finish', { content: this.nodeListToHTML() });
            }
            return;
        }
        const node = nodeList[index];
        if (node.name === 'img' && !node.attrs._uploaded) {
            this.uploadImage(node).then(() => {
            this.handleOutput(index + 1)
            });
        } else {
            this.handleOutput(index + 1);
        }
    }
    // 方法：将节点转为HTML
    nodeListToHTML(){
        return this.nodeList.map(node => `<${node.name} ${Object.keys(node.attrs).map(key => `${key}="${node.attrs[key]}"`).join(' ')}>${node.children ? this.htmlEncode(node.children[0].text) : ''}</${node.name}>`).join('');
    }
}
</script>

<style lang="less">
.footerTool{
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-content: center;
    width: 100%;
    position: fixed;
    bottom: 0rpx;
    overflow: hidden;
}

@font-face {font-family: "iconfont";
  src: url('iconfont.eot?t=1533802795939'); /* IE9*/
  src: url('iconfont.eot?t=1533802795939#iefix') format('embedded-opentype'), /* IE6-IE8 */
  url('data:application/x-font-woff;charset=utf-8;base64,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') format('woff'),
  url('iconfont.ttf?t=1533802795939') format('truetype'), /* chrome, firefox, opera, Safari, Android, iOS 4.2+*/
  url('iconfont.svg?t=1533802795939#iconfont') format('svg'); /* iOS 4.1- */
}
.ai-element{
	--uiaiElementDisplay: var(--aiElementDisplay, inline-flex);	
	--uiaiElementTextColor: var(--aiElementTextColor);
	--uiaiElementTextColorHover: var(--aiElementTextColorHover);	
	display: var(--uiaiElementDisplay);
	color: var(--uiaiElementTextColor);
	position: relative;
	overflow: hidden;
}
.ai-element4::before,
.ai-element4::after,
.ai-element4 .ai-element__label::before,
.ai-element4 .ai-element__label::after{
	transition-timing-function: ease-out;
	transition-duration: .2s, .2s;
	-webkit-transform: translate3d(0, 0, 0);
	        transform: translate3d(0, 0, 0);
}

.ai-element4:hover::before,
.ai-element4:hover::after,
.ai-element4:hover .ai-element__label::before,
.ai-element4:hover .ai-element__label::after{
	transition-delay: 0s, .05s;	
}

.ai-element4:hover::before{
	-webkit-transform: translate3d(-100%, 0, 0);
	        transform: translate3d(-100%, 0, 0);
}

.ai-element4:hover::after{
	-webkit-transform: translate3d(100%, 0, 0);
	        transform: translate3d(100%, 0, 0);
}

.ai-element4:hover .ai-element__label::before{
	-webkit-transform: translate3d(0, 100%, 0);
	        transform: translate3d(0, 100%, 0);
}

.ai-element4:hover .ai-element__label::after{
	-webkit-transform: translate3d(0, -100%, 0);
	        transform: translate3d(0, -100%, 0);
}

/* ai-element_padding-all */ 

.ai-element_padding-all{
	--uiaiElementLineWeight: var(--aiElementLineWeight, 5rpx);
	--uiaiElementLineColor: var(--aiElementLineColor, rgb(131, 208, 221));
	--uiaiElementPadding: var(--aiElementPadding, 5rpx);
    padding: var(--uiaiElementPadding);
     
}

.ai-element_padding-all::before, 
.ai-element_padding-all::after{
	width: 100%;
	height: var(--uiaiElementLineWeight);
	left: 0;
}

.ai-element_padding-all::before{
	top: 0;
}

.ai-element_padding-all::after{
    bottom: 0;
 
}

.ai-element_padding-all .ai-element__label::before,
.ai-element_padding-all .ai-element__label::after{
	width: var(--uiaiElementLineWeight);
	height: 100%;
    top: 0;
    border-radius: 50%
}

.ai-element_padding-all .ai-element__label::before{
	left: 0;
}

.ai-element_padding-all .ai-element__label::after{
	right: 0;
}

.ai-element_padding-all::before,
.ai-element_padding-all::after,
.ai-element_padding-all .ai-element__label::before,
.ai-element_padding-all .ai-element__label::after{
	content: "";     
	background-color: var(--uiaiElementLineColor);
	position: absolute; 
	opacity: 1;

	will-change: transform, opacity;
	transition-property: opacity, -webkit-transform;
	transition-property: transform, opacity;
	transition-property: transform, opacity, -webkit-transform;
}

.ai-element_padding-all:hover::before,
.ai-element_padding-all:hover::after,
.ai-element_padding-all:hover .ai-element__label::before,
.ai-element_padding-all:hover .ai-element__label::after{
	opacity: 0;
}


.iconfont {
  font-family:"iconfont" !important;
  font-size:16px;
  font-style:normal;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}



.icon-image:before { content: "\e7de"; }

.icon-align-left:before { content: "\e7f5"; }

.icon-close:before { content: "\e7fc"; }

.icon-plus:before { content: "\e7fe"; }

.editor-wrapper {
  width: 100vw;
  background: #fff;
  padding: 20rpx;
  box-sizing: border-box;
  padding-bottom:100rpx;
}

.editor-submit-btn {
  width: 700rpx;
  height: 90rpx;
  line-height: 90rpx;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 32rpx;
  margin-top: 40rpx;
  border-radius: 0rpx;
  background-color: #00D4D7;
  color: #fff;
}

.editor-submit-btn::before, .editor-submit-btn::after {
  border: none;
}

.editor-add-wrapper {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: space-around;
  width: 170rpx;
  height: 95rpx;
  margin: 0 auto;
}

.editor-node-wrapper {
  position: relative;
  margin: 0 auto 20rpx;
  border-bottom: solid 2rpx #E4E7ED;
}

.editor-delete {
  display: flex;
  align-items: center;
  justify-content: center;
  position: absolute;
  width: 40rpx;
  height: 40rpx;
  top: -16rpx;
  right: -10rpx;
  border-radius: 50%;
  background: #F56C6C;
  color: #fff;
}

.editor-textarea {
  margin:32rpx 0 30rpx;
  width:100%;
  line-height:1.2em;
  flex:1;
  padding:0rpx 40rpx;
}

.editor-image {
}
.editor-image image{
  width:100vw;

}
.photo,
.publish{
    width: 100%;
    height: 100%;
    border: 1px solid #C0C4CC;
}

.publish:hover
{
	width:120rpx;
    height:120rpx;
    background-color: rgb(161, 248, 248)
}

.sendImg{
    width: 80rpx;
    height: 80rpx;
    margin-top: 10rpx;
    transition-property:width,height;
    transition-duration:0.5s;
}

.sendImg:hover
{
	width:100rpx;
    height:100rpx;
}

.editor-add {
  color: rgb(64,158,255);
  font-size:30px;
  transition-property:font-size,color;
  transition-duration:0.5s;
}
.editor-add:hover{
    font-size:35px;
    color: rgb(131, 208, 221);
}

.com-selectBox{
  padding:20rpx;
 
}
.com-sContent{
    border: 1px solid #e2e2e2;
    background: white;
    font-size: 16px;
    position: relative;
    height: 30px;
    width:100%;
    line-height: 30px;
}
.com-sImg{
    position: absolute;
    right: 20rpx;
    top: 25rpx;
    width: 24px;
    height: 12px;
    transition: all .3s ease;
    color: rgb(64,158,255);
}

.com-sTxt{
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    padding:0 20px 0 6px;
    font-size: 14px;
}
.com-sList{
    background:#fff;
    border:1px solid #eee;
    box-shadow:1px 1px 8px rgba(0,0,0,0.1);
    width:inherit;
    position:absolute;
    box-sizing:border-box;
    z-index:3;
    max-height:120px;
    overflow:auto;
    top:-230rpx;
    width:50%;
}
.com-sItem{
    width:100%;
    height: 30px;
    line-height: 30px;
    padding: 0 6px;
    text-align: left;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    font-size: 14px;
}
.com-sItem:first-child{
    border-top: none;
}

.showType{
    display: none;
}
.spanTitle{
}
.iconf{
    margin-top: 20rpx;
}

.editorC{
    // overflow: hidden;
    background-color:#fff;
}
</style>